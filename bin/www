#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('virtual-office:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

var users = [];

// ON USER CONNECT
io.on('connection', (socket) => {
  console.log('user connected with ID ', socket.id);
  var gender = Math.round(Math.random()) ? "M" : "F";
  // create user
  var new_user = {
    id: socket.id,
    gender: gender,
  }
  // add user to the list of users
  var user_already_exists = false;
  for (i = 0, len = users.length; i < len; i++) {
    if (users[i].id == new_user.id) {
      users[i] = new_user;
      user_already_exists = true;
      break;
    }
  }
  if (!user_already_exists) {
    users.push(new_user);

    // send user their ID
    io.to(socket.id).emit('sending user their ID', socket.id);
    console.log(users);
  }


  // ON USER DISCONNECT
  socket.on('disconnect', () => {
    console.log('user disconnected');
    var user_gone_id = socket.id;
    for (i = 0, len = users.length; i < len; i++) {
      if (users[i].id == user_gone_id) {
        users.splice(i, 1);
        break;
      }
    }
    console.log(users);
    // TO DO: send disconnect notification to other users
  });

  // function that gets called, when we receive location data from a user and want to emit it to other users
  socket.on('send coordinates', (msg) => {
    // the user that sent the data
    var socket_id = socket.id;
    // sending location data to everyone but the sender
    for (i = 0, len = users.length; i < len; i++) {
      if (users[i].id !== socket_id) {
        // send to just one user
        io.to(users[i].id).emit('chat message', [msg[0], msg[1], socket_id]);
        // console.log('coordinates ' + msg + ' sent to: ' + users[i].id);
      }
    }
    // socket.emit('chat message', msg);
  });

  // an interaction happened, now we send videochat link to all involved
  socket.on('interaction happened', (other_user_id) => {
    var generated_chat_link = "https://zoom.us/j/94355006578?pwd=WVovYlhXWFRic0tmZzBiQkM4dmlndz09#success";
    io.to(socket.id).emit('generated videochat', generated_chat_link);
    io.to(other_user_id).emit('generated videochat', generated_chat_link);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
