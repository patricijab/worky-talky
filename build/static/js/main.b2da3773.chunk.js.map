{"version":3,"sources":["components/engine/engine.module.scss","components/engine/index.js","hooks/useEvent.js","views/Home/index.js","serviceWorker.js","index.js"],"names":["module","exports","BLOCKS","CreateEngine","startPosition","setState","this","settings","tile","game","posX","posY","moveX","moveY","blocks","repaint","collision","charX","charY","some","block","checkBlocks","console","log","requestAnimationFrame","move","direction","initialState","Engine","event","handler","useState","gameState","setGameState","started","setStarted","engine","setEngine","e","key","useEffect","window","addEventListener","removeEventListener","newState","className","styles","container","character","style","transform","height","width","map","Home","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2da3773.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"engine_container__2kikP\",\"character\":\"engine_character__2s3i-\",\"block\":\"engine_block__2iVwf\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./engine.module.scss\";\nimport { useEvent } from \"../../hooks\";\n\nconst BLOCKS = [\n  [140, 100, 280, 120],\n  [250, 200, 270, 340],\n  [390, 50, 400, 60]\n];\n\nconst charWidth = 10;\nconst charHeight = 10;\n\n//const blockWidth = 20;\n//const blockHeight = 20;\n\nfunction CreateEngine(startPosition, setState) {\n  this.settings = {\n    tile: 1,\n  };\n\n  this.game = \"start\";\n  this.posX = startPosition[0];\n  this.posY = startPosition[1];\n  this.moveX = 0;\n  this.moveY = 0;\n  this.blocks = BLOCKS;\n\n  const checkBlocks = () => {\n    const charX = this.posX + this.moveX;\n    const charY = this.posY + this.moveY;\n\n    return this.blocks.some((block) => {\n      // check if char hits a block\n      return ((charX >= block[0] && charX < block[2]) && (charY >= block[1] && charY < block[3])); \n    });\n  };\n\n  // function that will be continuously ran\n  this.repaint = () => {\n    // check if char has hit a block\n    const collision = checkBlocks();\n    console.log(collision);\n    if (!collision) {\n      this.posX += this.moveX;\n      this.posY += this.moveY;\n    }\n    this.moveX = 0;\n    this.moveY = 0;\n\n    // set state for use in the component\n    setState({\n      moveX: this.posX,\n      moveY: this.posY,\n      blocks: this.blocks,\n      //status: this.game,\n    });\n\n    // stop the game if the game var has been set to false\n    /*if (this.game !== 'start') {\n      // reset and stop\n      this.game = 'start';\n      //this.stage = 0;\n      this.jump = false;\n      this.direction = 'up';\n      this.position = 0;\n      return null;\n    }*/\n\n    // start repaint on next frame\n    return requestAnimationFrame(this.repaint);\n  };\n\n  // trigger initial paint\n  this.repaint();\n  return () => ({\n    move: (direction) => {\n      switch(direction) {\n        case \"up\": \n          this.moveY = -10;\n          break;\n        case \"right\":\n          this.moveX = 10;\n          break;\n        case \"down\":\n          this.moveY = 10;\n          break;\n        default: \n          this.moveX = -10;\n      }\n    },\n  });\n}\n\nconst initialState = {\n  moveX: 10,\n  moveY: 10,\n  blocks: BLOCKS,\n  // TODO: interaction + status: \"start\",\n};\n\nexport default function Engine() {\n  // game state\n  const [gameState, setGameState] = useState(initialState);\n  // is game running\n  const [started, setStarted] = useState(false);\n  // instance of game engine\n  const [engine, setEngine] = useState(null);\n  \n  const handleKeyPress = (e) => {\n    // no game initialised\n    if (engine === null) return;\n    // otherwise move\n    if (e.key === \"ArrowLeft\") {\n      engine.move(\"left\");\n    } else if (e.key === \"ArrowUp\") {\n      engine.move(\"up\");\n    } else if (e.key === \"ArrowRight\") {\n      engine.move(\"right\");\n    } else if (e.key === \"ArrowDown\") {\n      engine.move(\"down\");\n    } else if (e.key === \" \") {\n      // TODO: engine.interact();\n    }\n  };\n  \n  useEvent('keydown', handleKeyPress);\n  \n  useEffect(() => {\n    if (!started) {\n      // TODO: add a check to connect to the backend first\n      setStarted(true);\n      // create a new engine and save it to the state to use\n      setEngine(\n        new CreateEngine(\n          [initialState.moveX, initialState.moveY],\n          newState => setGameState(newState)\n        ),\n      );\n    }\n\n    // TODO: add game states\n    /*if (gameState.status === 'fail' && started) {\n      setStarted(false);\n      alert('You lost! Try again?');\n      setGameState(initialState);\n      setStart(true);\n    }*/\n  });\n  \n  return (\n    <div\n      className={styles.container}\n    >\n      <span\n        className={styles.character}\n        style={{\n          transform: `translate(${gameState.moveX}px, ${gameState.moveY}px)`,\n          height: charHeight,\n          width: charWidth,\n        }}\n      />\n      {\n        gameState.blocks.map(\n          block => (\n            <span\n              className={styles.block}\n              key={`${block[0]}_${block[1]}`}\n              style={{\n                transform: `translate(${block[0]}px, ${block[1]}px)`,\n                height: block[3]-block[1],\n                width: block[2]-block[0],\n              }}\n            />\n          ),\n        )\n      }\n    </div>\n  );\n}","import { useEffect } from 'react';\n\nexport default function useEvent(event, handler) {\n  useEffect(() => {\n    window.addEventListener(event, handler);\n\n    return function cleanup() {\n      window.removeEventListener(event, handler);\n    };\n  });\n}","import React from \"react\";\nimport Engine from \"../../components/engine\";\n\nexport default function Home() {\n    return (<Engine />);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './globals.scss';\nimport Home from './views/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}