{"version":3,"sources":["components/engine/engine.module.scss","components/engine/index.js","hooks/useEvent.js","views/Home/index.js","serviceWorker.js","index.js"],"names":["module","exports","socket","io","BLOCKS","CreateEngine","startPosition","setState","this","settings","tile","game","posX","posY","moveX","moveY","blocks","repaint","collision","charX","charY","some","block","checkBlocks","within","withinEdges","requestAnimationFrame","move","direction","initialState","Engine","event","handler","useState","gameState","setGameState","started","setStarted","engine","setEngine","setPlayer","e","key","useEffect","window","addEventListener","removeEventListener","on","data","console","log","newState","emit","className","styles","container","style","height","width","character","transform","map","Home","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1771ac43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"engine_container__1-N_k\",\"character\":\"engine_character__3AMkf\",\"block\":\"engine_block__WgUZo\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./engine.module.scss\";\r\nimport { useEvent } from \"../../hooks\";\r\nimport io from 'socket.io-client'\r\n\r\nlet socket = io(`http://localhost:3000`);\r\n\r\nconst BLOCKS = [\r\n  // outer walls \r\n  [0, 0, 5, 400],\r\n  [0, 0, 800, 5],\r\n  [795, 0, 800, 400],\r\n  [0, 395, 150, 400],\r\n  [190, 395, 800, 400],\r\n  // inner walls\r\n  [695, 0, 700, 180],\r\n  [695, 220, 700, 400],\r\n  [570, 175, 700, 180],\r\n  [525, 0, 530, 140],\r\n  [480, 135, 530, 140],\r\n  [385, 0, 390, 240],\r\n  [250, 135, 440, 140],\r\n  [0, 135, 150, 140],\r\n  [145, 135, 150, 230],\r\n  [145, 320, 150, 400],\r\n  [0, 275, 150, 280],\r\n  [250, 135, 255, 240],\r\n  [250, 235, 320, 240],\r\n  [495, 300, 500, 400],\r\n];\r\n\r\nconst charWidth = 10;\r\nconst charHeight = 10;\r\n\r\nconst containerWidth = 800;\r\nconst containerHeight = 400;\r\n\r\nfunction CreateEngine(startPosition, setState) {\r\n  this.settings = {\r\n    tile: 1,\r\n  };\r\n\r\n  this.game = \"start\";\r\n  this.posX = startPosition[0];\r\n  this.posY = startPosition[1];\r\n  this.moveX = 170;\r\n  this.moveY = 390;\r\n  this.blocks = BLOCKS;\r\n\r\n  const checkBlocks = () => {\r\n    const charX = this.posX + this.moveX;\r\n    const charY = this.posY + this.moveY;\r\n\r\n    return this.blocks.some((block) => {\r\n      // check if char hits a block\r\n      return ((charX + charWidth > block[0] && charX < block[2]) && (charY + charHeight > block[1] && charY < block[3])); \r\n    });\r\n  };\r\n\r\n  const withinEdges = () => {\r\n    const charX = this.posX + this.moveX;\r\n    const charY = this.posY + this.moveY;\r\n\r\n    return (charX < containerWidth && charY < containerHeight && charX >= 5 && charY >= 5)\r\n  };\r\n\r\n  // function that will be continuously ran\r\n  this.repaint = () => {\r\n    // check if char has hit a block\r\n    const collision = checkBlocks();\r\n    const within = withinEdges();\r\n    if (!collision && within) {\r\n      this.posX += this.moveX;\r\n      this.posY += this.moveY;\r\n    }\r\n    this.moveX = 0;\r\n    this.moveY = 0;\r\n\r\n    // set state for use in the component\r\n    setState({\r\n      moveX: this.posX,\r\n      moveY: this.posY,\r\n      blocks: this.blocks,\r\n      //status: this.game,\r\n    });\r\n\r\n    // stop the game if the game var has been set to false\r\n    /*if (this.game !== 'start') {\r\n      // reset and stop\r\n      this.game = 'start';\r\n      //this.stage = 0;\r\n      this.jump = false;\r\n      this.direction = 'up';\r\n      this.position = 0;\r\n      return null;\r\n    }*/\r\n\r\n    // start repaint on next frame\r\n    return requestAnimationFrame(this.repaint);\r\n  };\r\n\r\n  // trigger initial paint\r\n  this.repaint();\r\n  return () => ({\r\n    move: (direction) => {\r\n      switch(direction) {\r\n        case \"up\": \r\n          this.moveY = -10;\r\n          break;\r\n        case \"right\":\r\n          this.moveX = 10;\r\n          break;\r\n        case \"down\":\r\n          this.moveY = 10;\r\n          break;\r\n        default: \r\n          this.moveX = -10;\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nconst initialState = {\r\n  moveX: 170,\r\n  moveY: 390,\r\n  blocks: BLOCKS,\r\n  // TODO: interaction + status: \"start\",\r\n};\r\n\r\nexport default function Engine() {\r\n  // game state\r\n  const [gameState, setGameState] = useState(initialState);\r\n  // is game running\r\n  const [started, setStarted] = useState(false);\r\n  // instance of game engine\r\n  const [engine, setEngine] = useState(null);\r\n  const [player, setPlayer] = useState([]);\r\n  \r\n  const handleKeyPress = (e) => {\r\n    // no game initialised\r\n    if (engine === null) return;\r\n    // otherwise move\r\n    if (e.key === \"ArrowLeft\") {\r\n      engine.move(\"left\");\r\n    } else if (e.key === \"ArrowUp\") {\r\n      engine.move(\"up\");\r\n    } else if (e.key === \"ArrowRight\") {\r\n      engine.move(\"right\");\r\n    } else if (e.key === \"ArrowDown\") {\r\n      engine.move(\"down\");\r\n    } else if (e.key === \" \") {\r\n      // TODO: engine.interact();\r\n    }\r\n  };\r\n  \r\n  useEvent('keydown', handleKeyPress);\r\n  \r\n  useEffect(() => {\r\n    if (!started) {\r\n      // TODO: add a check to connect to the backend first\r\n      // dobiva podatke kje so drugi\r\n      socket.on(`chat message`, data => {\r\n        console.log(\"drugi player \", data);\r\n        setPlayer(data);\r\n      })\r\n      setStarted(true);\r\n      // create a new engine and save it to the state to use\r\n      setEngine(\r\n        new CreateEngine(\r\n          [initialState.moveX, initialState.moveY],\r\n          newState => setGameState(newState)\r\n        ),\r\n      );\r\n    }\r\n\r\n    // TODO: add game states\r\n    /*if (gameState.status === 'fail' && started) {\r\n      setStarted(false);\r\n      alert('You lost! Try again?');\r\n      setGameState(initialState);\r\n      setStart(true);\r\n    }*/\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.emit('send coordinates', [gameState.moveX, gameState.moveY]);\r\n  }, [gameState]);\r\n  \r\n  return (\r\n    <div\r\n      className={styles.container}\r\n      style={{\r\n        height: containerHeight,\r\n        width: containerWidth,\r\n      }}\r\n    >\r\n      <span\r\n        className={styles.character}\r\n        style={{\r\n          transform: `translate(${gameState.moveX}px, ${gameState.moveY}px)`,\r\n          height: charHeight,\r\n          width: charWidth,\r\n        }}\r\n      />\r\n      {\r\n        gameState.blocks.map(\r\n          block => (\r\n            <span\r\n              className={styles.block}\r\n              key={`${block[0]}_${block[1]}`}\r\n              style={{\r\n                transform: `translate(${block[0]}px, ${block[1]}px)`,\r\n                height: block[3]-block[1],\r\n                width: block[2]-block[0],\r\n              }}\r\n            />\r\n          ),\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}","import { useEffect } from 'react';\r\n\r\nexport default function useEvent(event, handler) {\r\n  useEffect(() => {\r\n    window.addEventListener(event, handler);\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener(event, handler);\r\n    };\r\n  });\r\n}","import React from \"react\";\r\nimport Engine from \"../../components/engine\";\r\n\r\nexport default function Home() {\r\n    return (<Engine />);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './globals.scss';\r\nimport Home from './views/Home';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Home />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}